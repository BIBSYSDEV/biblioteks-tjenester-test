version: 0.2

env:
  shell: bash

phases:

  install:
    runtime-versions:
      python: 3.8
      ruby: 2.6
    commands:
      - pip3 install --upgrade cfn-lint
      # Upgrade AWS CLI to the latest version
      - pip3 install --upgrade awscli
      # Install aws-sam-cli
      - pip3 install aws-sam-cli
      # Install cfn_nag
      - gem install cfn-nag
      - pip3 install --upgrade pip -r Stubs/requirements.txt

  pre_build:
    commands:
      - echo "pre_build steps for revision ${CODEBUILD_RESOLVED_SOURCE_VERSION}..."
      - env
      - aws --version
      - cfn-lint -v
      - cfn_nag -v

      # Lint
      - cfn-lint # uses .cfnlintrc

      # Setting up dynamoDB
      - aws dynamodb create-table --table-name contents --attribute-definitions AttributeName=isbn,AttributeType=S --key-schema AttributeName=isbn,KeyType=HASH --provisinioned-throughput ReadCapacityUnits=10,WriteCapacityUnits=5
      - tablestatus =  aws dynamodb describe-table --table-name contents | grep TableStatus
      - forLoopControl  = 0
      - |
        while [$tablestatus != "ACTIVE"] && [$forLoopControl -le 5]
        do
        forLoopControl=$(( $forLoopControl + 1 ))
        sleep 5
        tablestatus =  aws dynamodb describe-table --table-name contents | grep TableStatus
        done
      - aws dynamodb batch-write-item --request-items file://contents.json
      -
      - cd Stubs

      # Run cfn-nag (looks for patterns in CFN templates that may indicate insecure infrastructure)
      - cfn_nag_scan --output-format txt --print-suppression --blacklist-path .cfn_nag_blacklist --input-path . --template-pattern '^(?!.*buildspec\.y[a]?ml)((..*\.y[a]?ml)|(..*\.template))$'

  build:
    commands:
      - echo Build started on `date`
      - ls -a
      # Use AWS SAM to build and package the application by using AWS CloudFormation
      - sam build --debug
      - sam package --s3-bucket $S3_BUCKET --output-template-file packaged.yml

      # Lint after 'package'
      - cfn-lint packaged.yml
      - ls -a
      - mv * ..

    post_build:
      commands:
        - echo Build completed on `date`
        - echo Files
        - ls -l

artifacts:
  type: zip
  files:
    - packaged.yml
    - template-configuration.json
    - resources/*.
    - stub_api/*.
